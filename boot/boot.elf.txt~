
boot.elf:     file format elf32-i386


Disassembly of section .text:

00007c00 <_start>:

.globl _start

.code16
_start:
	cli
    7c00:	fa                   	cli    
	xorw %ax,%ax
    7c01:	31 c0                	xor    %eax,%eax
	movw %ax,%ds
    7c03:	8e d8                	mov    %eax,%ds
	movw %ax,%es
    7c05:	8e c0                	mov    %eax,%es
	movw %ax,%ss
    7c07:	8e d0                	mov    %eax,%ss

00007c09 <seta201>:
seta201:
	inb $0x64, %al
    7c09:	e4 64                	in     $0x64,%al
	testb $0x2, %al
    7c0b:	a8 02                	test   $0x2,%al
	jnz seta201
    7c0d:	75 fa                	jne    7c09 <seta201>

	movb $0xd1, %al
    7c0f:	b0 d1                	mov    $0xd1,%al
	outb %al, $0x64
    7c11:	e6 64                	out    %al,$0x64

00007c13 <seta202>:

seta202:
	inb $0x64, %al
    7c13:	e4 64                	in     $0x64,%al
	testb $0x2, %al
    7c15:	a8 02                	test   $0x2,%al
	jnz seta202
    7c17:	75 fa                	jne    7c13 <seta202>

	movb $0xdf, %al
    7c19:	b0 df                	mov    $0xdf,%al
	outb %al, $0x60
    7c1b:	e6 60                	out    %al,$0x60

	lgdt gdtdesc
    7c1d:	0f 01 16             	lgdtl  (%esi)
    7c20:	68 7c 0f 20 c0       	push   $0xc0200f7c
	movl %cr0, %eax
	orl $CR0_PE, %eax
    7c25:	66 83 c8 01          	or     $0x1,%ax
	movl %eax, %cr0
    7c29:	0f 22 c0             	mov    %eax,%cr0

	ljmp $(SEG_KCODE<<3), $start32
    7c2c:	ea                   	.byte 0xea
    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)

00007c31 <start32>:

.code32
start32:
	movw $(SEG_KDATA<<3), %ax
    7c31:	66 b8 10 00          	mov    $0x10,%ax
	movw %ax,%ds
    7c35:	8e d8                	mov    %eax,%ds
	movw %ax,%es
    7c37:	8e c0                	mov    %eax,%es
	movw %ax,%ss
    7c39:	8e d0                	mov    %eax,%ss
	
	movw $0x0, %ax
    7c3b:	66 b8 00 00          	mov    $0x0,%ax
	movw %ax,%fs
    7c3f:	8e e0                	mov    %eax,%fs
	movw %ax,%gs
    7c41:	8e e8                	mov    %eax,%gs
	
	movl $_start, %esp
    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
	call bootmain
    7c48:	e8 cf 00 00 00       	call   7d1c <bootmain>
    7c4d:	8d 76 00             	lea    0x0(%esi),%esi

00007c50 <gdt>:
	...
    7c58:	ff                   	(bad)  
    7c59:	ff 00                	incl   (%eax)
    7c5b:	00 00                	add    %al,(%eax)
    7c5d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
    7c64:	00                   	.byte 0x0
    7c65:	92                   	xchg   %eax,%edx
    7c66:	cf                   	iret   
	...

00007c68 <gdtdesc>:
    7c68:	17                   	pop    %ss
    7c69:	00 50 7c             	add    %dl,0x7c(%eax)
	...

00007c6e <waitdisk>:
  	entry();
	
}

void waitdisk(void)
{
    7c6e:	55                   	push   %ebp
    7c6f:	89 e5                	mov    %esp,%ebp
static inline uint8_t
inb(uint16_t port)
{
  uint8_t data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
    7c71:	ba f7 01 00 00       	mov    $0x1f7,%edx
    7c76:	ec                   	in     (%dx),%al
	while((inb(0x1F7) & 0xC0) != 0x40);
    7c77:	83 e0 c0             	and    $0xffffffc0,%eax
    7c7a:	3c 40                	cmp    $0x40,%al
    7c7c:	75 f8                	jne    7c76 <waitdisk+0x8>
}
    7c7e:	5d                   	pop    %ebp
    7c7f:	c3                   	ret    

00007c80 <readsect>:

// Read a single sector at offset into dst.
void readsect(void *dst, uint32_t offset)
{
    7c80:	55                   	push   %ebp
    7c81:	89 e5                	mov    %esp,%ebp
    7c83:	57                   	push   %edi
    7c84:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  	// Issue command.
	waitdisk();
    7c87:	e8 e2 ff ff ff       	call   7c6e <waitdisk>
}

static inline void
outb(uint16_t port, uint8_t data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
    7c8c:	ba f2 01 00 00       	mov    $0x1f2,%edx
    7c91:	b0 01                	mov    $0x1,%al
    7c93:	ee                   	out    %al,(%dx)
    7c94:	ba f3 01 00 00       	mov    $0x1f3,%edx
    7c99:	88 c8                	mov    %cl,%al
    7c9b:	ee                   	out    %al,(%dx)
	outb(0x1F2, 1);   // count = 1
	outb(0x1F3, offset);
	outb(0x1F4, offset >> 8);
    7c9c:	89 c8                	mov    %ecx,%eax
    7c9e:	c1 e8 08             	shr    $0x8,%eax
    7ca1:	ba f4 01 00 00       	mov    $0x1f4,%edx
    7ca6:	ee                   	out    %al,(%dx)
	outb(0x1F5, offset >> 16);
    7ca7:	89 c8                	mov    %ecx,%eax
    7ca9:	c1 e8 10             	shr    $0x10,%eax
    7cac:	ba f5 01 00 00       	mov    $0x1f5,%edx
    7cb1:	ee                   	out    %al,(%dx)
	outb(0x1F6, (offset >> 24) | 0xE0);
    7cb2:	89 c8                	mov    %ecx,%eax
    7cb4:	c1 e8 18             	shr    $0x18,%eax
    7cb7:	83 c8 e0             	or     $0xffffffe0,%eax
    7cba:	ba f6 01 00 00       	mov    $0x1f6,%edx
    7cbf:	ee                   	out    %al,(%dx)
    7cc0:	ba f7 01 00 00       	mov    $0x1f7,%edx
    7cc5:	b0 20                	mov    $0x20,%al
    7cc7:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);  // cmd 0x20 - read sectors*/

  	// Read data.
  	waitdisk();
    7cc8:	e8 a1 ff ff ff       	call   7c6e <waitdisk>
  asm volatile("cld; rep insl" :
    7ccd:	8b 7d 08             	mov    0x8(%ebp),%edi
    7cd0:	b9 80 00 00 00       	mov    $0x80,%ecx
    7cd5:	ba f0 01 00 00       	mov    $0x1f0,%edx
    7cda:	fc                   	cld    
    7cdb:	f3 6d                	rep insl (%dx),%es:(%edi)
  	insl(0x1F0, dst, SECTSIZE/4);
}
    7cdd:	5f                   	pop    %edi
    7cde:	5d                   	pop    %ebp
    7cdf:	c3                   	ret    

00007ce0 <readseg>:

void readseg(uint8_t* pa, uint32_t count, uint32_t offset)
{
    7ce0:	55                   	push   %ebp
    7ce1:	89 e5                	mov    %esp,%ebp
    7ce3:	57                   	push   %edi
    7ce4:	56                   	push   %esi
    7ce5:	53                   	push   %ebx
    7ce6:	8b 7d 08             	mov    0x8(%ebp),%edi
    7ce9:	8b 5d 10             	mov    0x10(%ebp),%ebx
  	uint8_t* epa;

  	epa = pa + count;
    7cec:	8b 75 0c             	mov    0xc(%ebp),%esi
    7cef:	01 fe                	add    %edi,%esi

  	// Round down to sector boundary.
  	pa -= offset % SECTSIZE;
    7cf1:	89 d8                	mov    %ebx,%eax
    7cf3:	25 ff 01 00 00       	and    $0x1ff,%eax
    7cf8:	29 c7                	sub    %eax,%edi

  	// Translate from bytes to sectors; kernel starts at sector 1.
  	offset = (offset / SECTSIZE) + 1;
    7cfa:	c1 eb 09             	shr    $0x9,%ebx
    7cfd:	43                   	inc    %ebx

  	// If this is too slow, we could read lots of sectors at a time.
  	// We'd write more to memory than asked, but it doesn't matter --
  	// we load in increasing order.
  	for(; pa < epa; pa += SECTSIZE, offset++)
    7cfe:	39 f7                	cmp    %esi,%edi
    7d00:	73 12                	jae    7d14 <readseg+0x34>
    		readsect(pa, offset);
    7d02:	53                   	push   %ebx
    7d03:	57                   	push   %edi
    7d04:	e8 77 ff ff ff       	call   7c80 <readsect>
  	for(; pa < epa; pa += SECTSIZE, offset++)
    7d09:	81 c7 00 02 00 00    	add    $0x200,%edi
    7d0f:	43                   	inc    %ebx
    7d10:	58                   	pop    %eax
    7d11:	5a                   	pop    %edx
    7d12:	eb ea                	jmp    7cfe <readseg+0x1e>
}
    7d14:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7d17:	5b                   	pop    %ebx
    7d18:	5e                   	pop    %esi
    7d19:	5f                   	pop    %edi
    7d1a:	5d                   	pop    %ebp
    7d1b:	c3                   	ret    

00007d1c <bootmain>:
{
    7d1c:	55                   	push   %ebp
    7d1d:	89 e5                	mov    %esp,%ebp
    7d1f:	57                   	push   %edi
    7d20:	56                   	push   %esi
    7d21:	53                   	push   %ebx
    7d22:	83 ec 0c             	sub    $0xc,%esp
	mbr = (uint8_t *)(0x7dbe);
    7d25:	c7 05 78 7e 00 00 be 	movl   $0x7dbe,0x7e78
    7d2c:	7d 00 00 
	readseg((uint8_t*)elf, 8192, (SECTSIZE)*(*(mbr+SECTORSTART+MBRSIZE)));// Read 'count' bytes at 'offset' from kernel into physical address 'pa'. Might copy more than asked.
    7d2f:	0f b6 05 d5 7d 00 00 	movzbl 0x7dd5,%eax
    7d36:	c1 e0 09             	shl    $0x9,%eax
    7d39:	50                   	push   %eax
    7d3a:	68 00 20 00 00       	push   $0x2000
    7d3f:	68 00 00 01 00       	push   $0x10000
    7d44:	e8 97 ff ff ff       	call   7ce0 <readseg>
  	if(*((uint32_t *)(elf->e_ident)) != ELF_MAGIC)
    7d49:	83 c4 0c             	add    $0xc,%esp
    7d4c:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
    7d53:	45 4c 46 
    7d56:	75 52                	jne    7daa <bootmain+0x8e>
  	ph = (struct elf32_phdr*)((uint8_t*)elf + elf->e_phoff);
    7d58:	a1 1c 00 01 00       	mov    0x1001c,%eax
    7d5d:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
  	eph = ph + elf->e_phnum;
    7d63:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
    7d6a:	c1 e6 05             	shl    $0x5,%esi
    7d6d:	01 de                	add    %ebx,%esi
  	for(; ph < eph; ph++){
    7d6f:	39 f3                	cmp    %esi,%ebx
    7d71:	73 2a                	jae    7d9d <bootmain+0x81>
    		pa = (uint8_t*)ph->p_paddr;
    7d73:	8b 7b 0c             	mov    0xc(%ebx),%edi
    		readseg(pa, ph->p_filesz, ph->p_offset);
    7d76:	ff 73 04             	pushl  0x4(%ebx)
    7d79:	ff 73 10             	pushl  0x10(%ebx)
    7d7c:	57                   	push   %edi
    7d7d:	e8 5e ff ff ff       	call   7ce0 <readseg>
    		if(ph->p_memsz > ph->p_filesz)
    7d82:	8b 4b 14             	mov    0x14(%ebx),%ecx
    7d85:	8b 43 10             	mov    0x10(%ebx),%eax
    7d88:	83 c4 0c             	add    $0xc,%esp
    7d8b:	39 c1                	cmp    %eax,%ecx
    7d8d:	76 09                	jbe    7d98 <bootmain+0x7c>
      			stosb(pa + ph->p_filesz, 0, ph->p_memsz - ph->p_filesz);
    7d8f:	01 c7                	add    %eax,%edi
    7d91:	29 c1                	sub    %eax,%ecx
}

static inline void
stosb(void *addr, int data, int cnt)
{
  asm volatile("cld; rep stosb" :
    7d93:	31 c0                	xor    %eax,%eax
    7d95:	fc                   	cld    
    7d96:	f3 aa                	rep stos %al,%es:(%edi)
  	for(; ph < eph; ph++){
    7d98:	83 c3 20             	add    $0x20,%ebx
    7d9b:	eb d2                	jmp    7d6f <bootmain+0x53>
}
    7d9d:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7da0:	5b                   	pop    %ebx
    7da1:	5e                   	pop    %esi
    7da2:	5f                   	pop    %edi
    7da3:	5d                   	pop    %ebp
  	entry();
    7da4:	ff 25 18 00 01 00    	jmp    *0x10018
}
    7daa:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7dad:	5b                   	pop    %ebx
    7dae:	5e                   	pop    %esi
    7daf:	5f                   	pop    %edi
    7db0:	5d                   	pop    %ebp
    7db1:	c3                   	ret    
