
boot.elf:     file format elf32-i386

Contents of section .text:
 7c00 fa31c08e d88ec08e d0e464a8 0275fab0  .1........d..u..
 7c10 d1e664e4 64a80275 fab0dfe6 600f0116  ..d.d..u....`...
 7c20 687c0f20 c06683c8 010f22c0 ea317c08  h|. .f...."..1|.
 7c30 0066b810 008ed88e c08ed066 b800008e  .f.........f....
 7c40 e08ee8bc 007c0000 e8ce0000 008d7600  .....|........v.
 7c50 00000000 00000000 ffff0000 009acf00  ................
 7c60 ffff0000 0092cf00 1700507c 00005589  ..........P|..U.
 7c70 e5baf701 0000ec83 e0c03c40 75f85dc3  ..........<@u.].
 7c80 5589e557 8b4d0ce8 e2ffffff baf20100  U..W.M..........
 7c90 00b001ee baf30100 0088c8ee 89c8c1e8  ................
 7ca0 08baf401 0000ee89 c8c1e810 baf50100  ................
 7cb0 00ee89c8 c1e81883 c8e0baf6 010000ee  ................
 7cc0 baf70100 00b020ee e8a1ffff ff8b7d08  ...... .......}.
 7cd0 b9800000 00baf001 0000fcf3 6d5f5dc3  ............m_].
 7ce0 5589e557 56538b5d 088b7d10 8b750c01  U..WVS.]..}..u..
 7cf0 de89f825 ff010000 29c3c1ef 0939f373  ...%....)....9.s
 7d00 125753e8 78ffffff 81c30002 00004758  .WS.x.........GX
 7d10 5aebea8d 65f45b5e 5f5dc355 89e55756  Z...e.[^_].U..WV
 7d20 5383ec1c c705807e 0000be7d 00008b35  S......~...}...5
 7d30 d67d0000 c1e60956 68002000 00680000  .}.....Vh. ..h..
 7d40 0100e899 ffffff83 c40c813d 00000100  ...........=....
 7d50 7f454c46 755ba11c 0001008d 90000001  .ELFu[..........
 7d60 000fb71d 2c000100 c1e30501 d339da73  ....,........9.s
 7d70 338b7a0c 8b420401 f050ff72 108955e4  3.z..B...P.r..U.
 7d80 57e85aff ffff8b55 e48b4a14 8b421083  W.Z....U..J..B..
 7d90 c40c39c1 760901c7 29c131c0 fcf3aa83  ..9.v...).1.....
 7da0 c220ebc9 8d65f45b 5e5f5dff 25180001  . ...e.[^_].%...
 7db0 008d65f4 5b5e5f5d c3                 ..e.[^_].       
Contents of section .eh_frame:
 7dbc 14000000 00000000 017a5200 017c0801  .........zR..|..
 7dcc 1b0c0404 88010000 1c000000 1c000000  ................
 7ddc 92feffff 12000000 00410e08 8502420d  .........A....B.
 7dec 054ec50c 04040000 20000000 3c000000  .N...... ...<...
 7dfc 84feffff 60000000 00410e08 8502420d  ....`....A....B.
 7e0c 05418703 025ac741 c50c0404 28000000  .A...Z.A....(...
 7e1c 60000000 c0feffff 3b000000 00410e08  `.......;....A..
 7e2c 8502420d 05438703 86048305 71c341c6  ..B..C......q.A.
 7e3c 41c741c5 0c040400 38000000 8c000000  A.A.....8.......
 7e4c cffeffff 9e000000 00410e08 8502420d  .........A....B.
 7e5c 05468703 86048305 02840ac3 41c641c7  .F..........A.A.
 7e6c 41c50c04 04460b44 c341c641 c741c50c  A....F.D.A.A.A..
 7e7c 04040000                             ....            
Contents of section .debug_info:
 0000 7a050000 04000000 00000401 25010000  z...........%...
 0010 0c270000 00d00100 006e7c00 004b0100  .'.......n|..K..
 0020 00000000 00029b00 0000032e 30000000  ............0...
 0030 030108ef 00000003 0106f100 00000279  ...............y
 0040 01000003 30490000 00030207 8b010000  ....0I..........
 0050 03020532 00000002 1c010000 03326200  ...2.........2b.
 0060 00000304 07070100 00040405 696e7400  ............int.
 0070 030807fd 00000003 0805cd00 00000304  ................
 0080 07020100 00050403 0405d200 0000066d  ...............m
 0090 62720005 18990000 00070425 00000002  br.........%....
 00a0 81000000 041b3e00 00000214 00000004  ......>.........
 00b0 1f570000 00022602 0000042b 57000000  .W....&....+W...
 00c0 02db0000 00042f57 00000008 a3000000  ....../W........
 00d0 34043b80 01000009 14010000 043c8001  4.;..........<..
 00e0 00000009 bd000000 043d9f00 00001009  .........=......
 00f0 5d000000 043e9f00 00001209 e5000000  ]....>..........
 0100 043faa00 00001409 1f000000 0440b500  .?...........@..
 0110 00001809 b1010000 0441c000 00001c09  .........A......
 0120 c3010000 0442c000 00002009 55000000  .....B.... .U...
 0130 0443aa00 00002409 c4000000 04449f00  .C....$......D..
 0140 00002809 67000000 04459f00 00002a09  ..(.g....E....*.
 0150 06020000 04469f00 00002c09 ac000000  .....F....,.....
 0160 04479f00 00002e09 16020000 04489f00  .G...........H..
 0170 00003009 00000000 04499f00 00003200  ..0......I....2.
 0180 0a300000 00900100 000b9001 00000f00  .0..............
 0190 03040744 0000000c a6010000 20046f01  ...D........ .o.
 01a0 0d020000 0d940000 00047001 aa000000  ..........p.....
 01b0 000dee01 00000471 01c00000 00040d8c  .......q........
 01c0 00000004 7201b500 0000080d 4d000000  ....r.......M...
 01d0 047301b5 0000000c 0dfd0100 00047401  .s............t.
 01e0 aa000000 100d3c00 00000475 01aa0000  ......<....u....
 01f0 00140d9e 01000004 7601aa00 0000180d  ........v.......
 0200 1e020000 047701aa 0000001c 000e8e00  .....w..........
 0210 00000120 0503807e 00000f73 00000001  ... ...~...s....
 0220 5fe07c00 003b0000 00019c73 02000010  _.|..;.....s....
 0230 70610001 5f990000 00000000 0011f701  pa.._...........
 0240 0000015f 57000000 02910412 f0010000  ..._W...........
 0250 015f5700 00001f00 00001365 70610001  ._W........epa..
 0260 61990000 003e0000 0014087d 00007302  a....>.....}..s.
 0270 0000000f 82010000 014f807c 00006000  .........O.|..`.
 0280 0000019c ca030000 15647374 00014f85  .........dst..O.
 0290 00000002 910011f0 01000001 4f570000  ............OW..
 02a0 00029104 16090500 008c7c00 00080000  ..........|.....
 02b0 000153ca 02000017 20050000 63000000  ..S..... ...c...
 02c0 17150500 00770000 00001609 05000094  .....w..........
 02d0 7c000008 00000001 54f00200 00172005  |.......T..... .
 02e0 00008d00 00001715 050000a0 00000000  ................
 02f0 16090500 00a17c00 00060000 00015516  ......|.......U.
 0300 03000017 20050000 b6000000 17150500  .... ...........
 0310 00ca0000 00001609 050000ac 7c000006  ............|...
 0320 00000001 563c0300 00172005 0000e000  ....V<.... .....
 0330 00001715 050000f4 00000000 16090500  ................
 0340 00ba7c00 00060000 00015762 03000017  ..|.......Wb....
 0350 20050000 0a010000 17150500 00240100   ............$..
 0360 00001609 050000c0 7c000008 00000001  ........|.......
 0370 58880300 00172005 00003a01 00001715  X..... ...:.....
 0380 0500004f 01000000 162c0500 00cd7c00  ...O.....,....|.
 0390 00100000 00015cb7 03000017 4e050000  ......\.....N...
 03a0 65010000 17430500 007a0100 00173805  e....C...z....8.
 03b0 00008e01 00000014 8c7c0000 ca030000  .........|......
 03c0 14cd7c00 00ca0300 00000f0b 00000001  ..|.............
 03d0 496e7c00 00120000 00019c08 04000018  In|.............
 03e0 5a050000 717c0000 06000000 014b1766  Z...q|.......K.f
 03f0 050000a4 01000019 717c0000 06000000  ........q|......
 0400 1a710500 00000000 1b310200 0001221b  .q.......1....".
 0410 7d00009e 00000001 9cc80400 001c656c  }.............el
 0420 66000124 c8040000 00000100 13706800  f..$.........ph.
 0430 0125ce04 0000ba01 00001365 70680001  .%.........eph..
 0440 25ce0400 00e40100 001d2100 00000127  %.........!....'
 0450 d5040000 f7010000 13706100 01289900  .........pa..(..
 0460 00000e02 00001d0e 02000001 2e570000  .............W..
 0470 00210200 001e7300 00000132 69000000  .!....s....2i...
 0480 86040000 1f0016db 0400009a 7d000005  ............}...
 0490 00000001 3fb50400 0017fd04 00003f02  ....?.........?.
 04a0 000017f2 04000062 02000017 e7040000  .......b........
 04b0 76020000 0014477d 00001a02 00001486  v.....G}........
 04c0 7d00001a 02000000 0704cb00 00000704  }...............
 04d0 97010000 200704d4 04000021 7b000000  .... ......!{...
 04e0 022c0309 05000022 50000000 022c8500  .,....."P....,..
 04f0 000022b9 01000002 2c690000 0023636e  ..".....,i...#cn
 0500 7400022c 69000000 0021be01 00000217  t..,i....!......
 0510 032c0500 0022cb01 00000217 3e000000  .,..."......>...
 0520 22b90100 00021725 00000000 21b80000  "......%....!...
 0530 00020e03 5a050000 22cb0100 00020e69  ....Z..."......i
 0540 00000022 50000000 020e8500 00002363  ..."P.........#c
 0550 6e740002 0e690000 00002469 6e620002  nt...i....$inb..
 0560 05250000 000322cb 01000002 053e0000  .%...."......>..
 0570 0025b901 00000207 25000000 00005400  .%......%.....T.
 0580 00000200 fc010000 04012601 0000007c  ..........&....|
 0590 00006e7c 0000626f 6f746173 6d2e5300  ..n|..bootasm.S.
 05a0 2f686f6d 652f7775 64657975 2f4f532f  /home/wudeyu/OS/
 05b0 41494d2d 6c616231 2f626f6f 742f6172  AIM-lab1/boot/ar
 05c0 63682f69 33383600 474e5520 41532032  ch/i386.GNU AS 2
 05d0 2e323700 0180                        .27...          
Contents of section .debug_abbrev:
 0000 01110125 0e130b03 0e1b0e11 01120610  ...%............
 0010 17000002 1600030e 3a0b3b0b 49130000  ........:.;.I...
 0020 0324000b 0b3e0b03 0e000004 24000b0b  .$...>......$...
 0030 3e0b0308 0000050f 000b0b00 00063400  >.............4.
 0040 03083a0b 3b0b4913 3f193c19 0000070f  ..:.;.I.?.<.....
 0050 000b0b49 13000008 1301030e 0b0b3a0b  ...I..........:.
 0060 3b0b0113 0000090d 00030e3a 0b3b0b49  ;..........:.;.I
 0070 13380b00 000a0101 49130113 00000b21  .8......I......!
 0080 0049132f 0b00000c 1301030e 0b0b3a0b  .I./..........:.
 0090 3b050113 00000d0d 00030e3a 0b3b0549  ;..........:.;.I
 00a0 13380b00 000e3400 47133a0b 3b0b0218  .8....4.G.:.;...
 00b0 00000f2e 013f1903 0e3a0b3b 0b271911  .....?...:.;.'..
 00c0 01120640 18974219 01130000 10050003  ...@..B.........
 00d0 083a0b3b 0b491302 17000011 0500030e  .:.;.I..........
 00e0 3a0b3b0b 49130218 00001205 00030e3a  :.;.I..........:
 00f0 0b3b0b49 13021700 00133400 03083a0b  .;.I......4...:.
 0100 3b0b4913 02170000 14898201 00110131  ;.I............1
 0110 13000015 05000308 3a0b3b0b 49130218  ........:.;.I...
 0120 0000161d 01311311 01120658 0b590b01  .....1.....X.Y..
 0130 13000017 05003113 02170000 181d0131  ......1........1
 0140 13110112 06580b59 0b000019 0b011101  .....X.Y........
 0150 12060000 1a340031 1300001b 2e013f19  .....4.1......?.
 0160 030e3a0b 3b0b2719 87011911 01120640  ..:.;.'........@
 0170 18011300 001c3400 03083a0b 3b0b4913  ......4...:.;.I.
 0180 1c060000 1d340003 0e3a0b3b 0b491302  .....4...:.;.I..
 0190 1700001e 2e013f19 030e3a0b 3b0b4913  ......?...:.;.I.
 01a0 3c190113 00001f18 00000020 15002719  <.......... ..'.
 01b0 0000212e 01030e3a 0b3b0b27 19200b01  ..!....:.;.'. ..
 01c0 13000022 0500030e 3a0b3b0b 49130000  ..."....:.;.I...
 01d0 23050003 083a0b3b 0b491300 00242e01  #....:.;.I...$..
 01e0 03083a0b 3b0b2719 4913200b 00002534  ..:.;.'.I. ...%4
 01f0 00030e3a 0b3b0b49 13000000 01110010  ...:.;.I........
 0200 06110112 0103081b 08250813 05000000  .........%......
Contents of section .debug_loc:
 0000 72000000 8c000000 02009100 8c000000  r...............
 0010 a9000000 01005300 00000000 00000072  ......S........r
 0020 0000008f 00000002 0091088f 000000ab  ................
 0030 00000001 00570000 00000000 00008300  .....W..........
 0040 0000aa00 00000100 56aa0000 00ad0000  ........V.......
 0050 00080091 00069104 06229f00 00000000  ........."......
 0060 0000001e 00000026 00000002 00319f00  .......&.....1..
 0070 00000000 0000001e 00000026 00000004  ...........&....
 0080 000af201 9f000000 00000000 00260000  .............&..
 0090 002e0000 00010051 00000000 00000000  .......Q........
 00a0 26000000 2e000000 04000af3 019f0000  &...............
 00b0 00000000 00002e00 00003900 00000200  ..........9.....
 00c0 91050000 00000000 00002e00 00003900  ..............9.
 00d0 00000400 0af4019f 00000000 00000000  ................
 00e0 39000000 44000000 02009106 00000000  9...D...........
 00f0 00000000 39000000 44000000 04000af5  ....9...D.......
 0100 019f0000 00000000 00004400 00005200  ..........D...R.
 0110 00000800 91079401 09e0219f 00000000  ..........!.....
 0120 00000000 44000000 52000000 04000af6  ....D...R.......
 0130 019f0000 00000000 00005200 00005a00  ..........R...Z.
 0140 00000300 08209f00 00000000 00000052  ..... .........R
 0150 0000005a 00000004 000af701 9f000000  ...Z............
 0160 00000000 005f0000 006f0000 00030008  ....._...o......
 0170 809f0000 00000000 00005f00 00006f00  .........._...o.
 0180 00000200 91000000 00000000 00005f00  .............._.
 0190 00006f00 00000400 0af0019f 00000000  ..o.............
 01a0 00000000 08000000 09000000 04000af7  ................
 01b0 019f0000 00000000 0000f300 00001701  ................
 01c0 00000100 52170100 00340100 00020075  ....R....4.....u
 01d0 64340100 00420100 00010052 00000000  d4...B.....R....
 01e0 00000000 ff000000 3a010000 01005300  ........:.....S.
 01f0 00000000 00000036 01000042 01000005  .......6...B....
 0200 000c1800 01000000 00000000 00000601  ................
 0210 00002a01 00000100 57000000 00000000  ..*.....W.......
 0220 00c90000 003b0100 00010056 43010000  .....;.....VC...
 0230 48010000 01005600 00000000 00000028  H.....V........(
 0240 0100002c 01000006 00710070 001c9f2c  ...,.....q.p...,
 0250 01000031 01000001 00510000 00000000  ...1.....Q......
 0260 00002801 00003101 00000200 309f0000  ..(...1.....0...
 0270 00000000 00002801 00002a01 00000600  ......(...*.....
 0280 77007000 229f2a01 00003101 00000100  w.p.".*...1.....
 0290 57000000 00000000 00                 W........       
Contents of section .debug_aranges:
 0000 1c000000 02000000 00000400 00000000  ................
 0010 6e7c0000 4b010000 00000000 00000000  n|..K...........
 0020 1c000000 02007e05 00000400 00000000  ......~.........
 0030 007c0000 6e000000 00000000 00000000  .|..n...........
Contents of section .debug_line:
 0000 22010000 02008600 00000101 fb0e0d00  "...............
 0010 01010101 00000001 0000012e 2e2f696e  ............./in
 0020 636c7564 652f6172 63682f69 33383600  clude/arch/i386.
 0030 2e2e2f69 6e636c75 64652f73 7973002e  ../include/sys..
 0040 2e2f696e 636c7564 65002e2e 2f696e63  ./include.../inc
 0050 6c756465 2f61696d 0000626f 6f746d61  lude/aim..bootma
 0060 696e2e63 00000000 7838362e 68000100  in.c....x86.h...
 0070 00747970 65732e68 00020000 656c662e  .types.h....elf.
 0080 68000300 00626f6f 742e6800 04000000  h....boot.h.....
 0090 0005026e 7c000003 c9000104 0203bf7f  ...n|...........
 00a0 3c000204 01065804 01000204 010603c2  <.....X.........
 00b0 00207532 76040203 47580401 033cf204  . u2v...GX...<..
 00c0 02034458 0401033d 66040203 43580401  ..DX...=f...CX..
 00d0 033e6604 02034282 040103c2 00d60402  .>f...B.........
 00e0 03b57f58 040103cd 00f23fbd 5b930002  ...X......?.[...
 00f0 04014100 0204024b 00020402 73ae03b3  ..A....K....s...
 0100 7f8298a1 94f5e8ad 00020401 bb4b3d08  .............K=.
 0110 21f30402 036f4a04 01030d58 030c5872  !....oJ....X..Xr
 0120 68020800 01015100 00000200 20000000  h.....Q..... ...
 0130 0101fb0e 0d000101 01010000 00010000  ................
 0140 0100626f 6f746173 6d2e5300 00000000  ..bootasm.S.....
 0150 00050200 7c000003 1f01212f 2f2f302f  ....|.....!///0/
 0160 2f302f31 2f2f302f 30593d4b 3e5c4b2f  /0/1//0/0Y=K>\K/
 0170 2f304b2f 30590226 000101             /0K/0Y.&...     
Contents of section .debug_str:
 0000 655f7368 7374726e 64780077 61697464  e_shstrndx.waitd
 0010 69736b00 456c6633 325f576f 72640065  isk.Elf32_Word.e
 0020 5f656e74 72790062 6f6f746d 61696e2e  _entry.bootmain.
 0030 63007368 6f727420 696e7400 705f6d65  c.short int.p_me
 0040 6d737a00 73697a65 74797065 00705f70  msz.sizetype.p_p
 0050 61646472 00655f66 6c616773 00655f6d  addr.e_flags.e_m
 0060 61636869 6e650065 5f706865 6e747369  achine.e_phentsi
 0070 7a650072 65616473 65670073 746f7362  ze.readseg.stosb
 0080 00456c66 33325f48 616c6600 705f7661  .Elf32_Half.p_va
 0090 64647200 705f7479 70650075 696e7438  ddr.p_type.uint8
 00a0 5f740065 6c663332 68647200 655f7368  _t.elf32hdr.e_sh
 00b0 656e7473 697a6500 696e736c 00655f74  entsize.insl.e_t
 00c0 79706500 655f6568 73697a65 006c6f6e  ype.e_ehsize.lon
 00d0 67206c6f 6e672069 6e740045 6c663332  g long int.Elf32
 00e0 5f4f6666 00655f76 65727369 6f6e0075  _Off.e_version.u
 00f0 6e736967 6e656420 63686172 006c6f6e  nsigned char.lon
 0100 67206c6f 6e672075 6e736967 6e656420  g long unsigned 
 0110 696e7400 655f6964 656e7400 75696e74  int.e_ident.uint
 0120 33325f74 00474e55 20433131 20362e32  32_t.GNU C11 6.2
 0130 2e30202d 6d333220 2d6d7475 6e653d69  .0 -m32 -mtune=i
 0140 33383620 2d6d6172 63683d69 33383620  386 -march=i386 
 0150 2d67202d 4f32202d 4f73202d 666e6f2d  -g -O2 -Os -fno-
 0160 73746163 6b2d7072 6f746563 746f7220  stack-protector 
 0170 2d666e6f 2d706963 0075696e 7431365f  -fno-pic.uint16_
 0180 74007265 61647365 63740073 686f7274  t.readsect.short
 0190 20756e73 69676e65 6420696e 7400705f   unsigned int.p_
 01a0 666c6167 7300656c 6633325f 70686472  flags.elf32_phdr
 01b0 00655f70 686f6666 00646174 61006f75  .e_phoff.data.ou
 01c0 74620065 5f73686f 66660070 6f727400  tb.e_shoff.port.
 01d0 2f686f6d 652f7775 64657975 2f4f532f  /home/wudeyu/OS/
 01e0 41494d2d 6c616231 2f626f6f 7400705f  AIM-lab1/boot.p_
 01f0 6f666673 65740063 6f756e74 00705f66  offset.count.p_f
 0200 696c6573 7a00655f 70686e75 6d006b4f  ilesz.e_phnum.kO
 0210 66667365 7400655f 73686e75 6d00705f  ffset.e_shnum.p_
 0220 616c6967 6e00456c 6633325f 41646472  align.Elf32_Addr
 0230 00626f6f 746d6169 6e00               .bootmain.      
Contents of section .comment:
 0000 4743433a 2028474e 55292036 2e322e30  GCC: (GNU) 6.2.0
 0010 00                                   .               

Disassembly of section .text:

00007c00 <_start>:

.globl _start

.code16
_start:
	cli
    7c00:	fa                   	cli    
	xorw %ax,%ax
    7c01:	31 c0                	xor    %eax,%eax
	movw %ax,%ds
    7c03:	8e d8                	mov    %eax,%ds
	movw %ax,%es
    7c05:	8e c0                	mov    %eax,%es
	movw %ax,%ss
    7c07:	8e d0                	mov    %eax,%ss

00007c09 <seta201>:
seta201:
	inb $0x64, %al
    7c09:	e4 64                	in     $0x64,%al
	testb $0x2, %al
    7c0b:	a8 02                	test   $0x2,%al
	jnz seta201
    7c0d:	75 fa                	jne    7c09 <seta201>

	movb $0xd1, %al
    7c0f:	b0 d1                	mov    $0xd1,%al
	outb %al, $0x64
    7c11:	e6 64                	out    %al,$0x64

00007c13 <seta202>:

seta202:
	inb $0x64, %al
    7c13:	e4 64                	in     $0x64,%al
	testb $0x2, %al
    7c15:	a8 02                	test   $0x2,%al
	jnz seta202
    7c17:	75 fa                	jne    7c13 <seta202>

	movb $0xdf, %al
    7c19:	b0 df                	mov    $0xdf,%al
	outb %al, $0x60
    7c1b:	e6 60                	out    %al,$0x60

	lgdt gdtdesc
    7c1d:	0f 01 16             	lgdtl  (%esi)
    7c20:	68 7c 0f 20 c0       	push   $0xc0200f7c
	movl %cr0, %eax
	orl $CR0_PE, %eax
    7c25:	66 83 c8 01          	or     $0x1,%ax
	movl %eax, %cr0
    7c29:	0f 22 c0             	mov    %eax,%cr0

	ljmp $(SEG_KCODE<<3), $start32
    7c2c:	ea                   	.byte 0xea
    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)

00007c31 <start32>:

.code32
start32:
	movw $(SEG_KDATA<<3), %ax
    7c31:	66 b8 10 00          	mov    $0x10,%ax
	movw %ax,%ds
    7c35:	8e d8                	mov    %eax,%ds
	movw %ax,%es
    7c37:	8e c0                	mov    %eax,%es
	movw %ax,%ss
    7c39:	8e d0                	mov    %eax,%ss
	
	movw $0x0, %ax
    7c3b:	66 b8 00 00          	mov    $0x0,%ax
	movw %ax,%fs
    7c3f:	8e e0                	mov    %eax,%fs
	movw %ax,%gs
    7c41:	8e e8                	mov    %eax,%gs
	
	movl $_start, %esp
    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
	call bootmain
    7c48:	e8 ce 00 00 00       	call   7d1b <bootmain>
    7c4d:	8d 76 00             	lea    0x0(%esi),%esi

00007c50 <gdt>:
	...
    7c58:	ff                   	(bad)  
    7c59:	ff 00                	incl   (%eax)
    7c5b:	00 00                	add    %al,(%eax)
    7c5d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
    7c64:	00                   	.byte 0x0
    7c65:	92                   	xchg   %eax,%edx
    7c66:	cf                   	iret   
	...

00007c68 <gdtdesc>:
    7c68:	17                   	pop    %ss
    7c69:	00 50 7c             	add    %dl,0x7c(%eax)
	...

00007c6e <waitdisk>:
  	entry();
	
}

void waitdisk(void)
{
    7c6e:	55                   	push   %ebp
    7c6f:	89 e5                	mov    %esp,%ebp
static inline uint8_t
inb(uint16_t port)
{
  uint8_t data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
    7c71:	ba f7 01 00 00       	mov    $0x1f7,%edx
    7c76:	ec                   	in     (%dx),%al
	while((inb(0x1F7) & 0xC0) != 0x40);
    7c77:	83 e0 c0             	and    $0xffffffc0,%eax
    7c7a:	3c 40                	cmp    $0x40,%al
    7c7c:	75 f8                	jne    7c76 <waitdisk+0x8>
}
    7c7e:	5d                   	pop    %ebp
    7c7f:	c3                   	ret    

00007c80 <readsect>:

// Read a single sector at offset into dst.
void readsect(void *dst, uint32_t offset)
{
    7c80:	55                   	push   %ebp
    7c81:	89 e5                	mov    %esp,%ebp
    7c83:	57                   	push   %edi
    7c84:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  	// Issue command.
	waitdisk();
    7c87:	e8 e2 ff ff ff       	call   7c6e <waitdisk>
}

static inline void
outb(uint16_t port, uint8_t data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
    7c8c:	ba f2 01 00 00       	mov    $0x1f2,%edx
    7c91:	b0 01                	mov    $0x1,%al
    7c93:	ee                   	out    %al,(%dx)
    7c94:	ba f3 01 00 00       	mov    $0x1f3,%edx
    7c99:	88 c8                	mov    %cl,%al
    7c9b:	ee                   	out    %al,(%dx)
	outb(0x1F2, 1);   // count = 1
	outb(0x1F3, offset);
	outb(0x1F4, offset >> 8);
    7c9c:	89 c8                	mov    %ecx,%eax
    7c9e:	c1 e8 08             	shr    $0x8,%eax
    7ca1:	ba f4 01 00 00       	mov    $0x1f4,%edx
    7ca6:	ee                   	out    %al,(%dx)
	outb(0x1F5, offset >> 16);
    7ca7:	89 c8                	mov    %ecx,%eax
    7ca9:	c1 e8 10             	shr    $0x10,%eax
    7cac:	ba f5 01 00 00       	mov    $0x1f5,%edx
    7cb1:	ee                   	out    %al,(%dx)
	outb(0x1F6, (offset >> 24) | 0xE0);
    7cb2:	89 c8                	mov    %ecx,%eax
    7cb4:	c1 e8 18             	shr    $0x18,%eax
    7cb7:	83 c8 e0             	or     $0xffffffe0,%eax
    7cba:	ba f6 01 00 00       	mov    $0x1f6,%edx
    7cbf:	ee                   	out    %al,(%dx)
    7cc0:	ba f7 01 00 00       	mov    $0x1f7,%edx
    7cc5:	b0 20                	mov    $0x20,%al
    7cc7:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);  // cmd 0x20 - read sectors*/

  	// Read data.
  	waitdisk();
    7cc8:	e8 a1 ff ff ff       	call   7c6e <waitdisk>
  asm volatile("cld; rep insl" :
    7ccd:	8b 7d 08             	mov    0x8(%ebp),%edi
    7cd0:	b9 80 00 00 00       	mov    $0x80,%ecx
    7cd5:	ba f0 01 00 00       	mov    $0x1f0,%edx
    7cda:	fc                   	cld    
    7cdb:	f3 6d                	rep insl (%dx),%es:(%edi)
  	insl(0x1F0, dst, SECTSIZE/4);
}
    7cdd:	5f                   	pop    %edi
    7cde:	5d                   	pop    %ebp
    7cdf:	c3                   	ret    

00007ce0 <readseg>:

void readseg(uint8_t* pa, uint32_t count, uint32_t offset)
{
    7ce0:	55                   	push   %ebp
    7ce1:	89 e5                	mov    %esp,%ebp
    7ce3:	57                   	push   %edi
    7ce4:	56                   	push   %esi
    7ce5:	53                   	push   %ebx
    7ce6:	8b 5d 08             	mov    0x8(%ebp),%ebx
    7ce9:	8b 7d 10             	mov    0x10(%ebp),%edi
  	uint8_t* epa;

  	epa = pa + count;
    7cec:	8b 75 0c             	mov    0xc(%ebp),%esi
    7cef:	01 de                	add    %ebx,%esi

  	// Round down to sector boundary.
  	pa -= offset % SECTSIZE;
    7cf1:	89 f8                	mov    %edi,%eax
    7cf3:	25 ff 01 00 00       	and    $0x1ff,%eax
    7cf8:	29 c3                	sub    %eax,%ebx

  	// Translate from bytes to sectors; kernel starts at sector 1.
  	offset = (offset / SECTSIZE);
    7cfa:	c1 ef 09             	shr    $0x9,%edi

  	// If this is too slow, we could read lots of sectors at a time.
  	// We'd write more to memory than asked, but it doesn't matter --
  	// we load in increasing order.
  	for(; pa < epa; pa += SECTSIZE, offset++)
    7cfd:	39 f3                	cmp    %esi,%ebx
    7cff:	73 12                	jae    7d13 <readseg+0x33>
    		readsect(pa, offset);
    7d01:	57                   	push   %edi
    7d02:	53                   	push   %ebx
    7d03:	e8 78 ff ff ff       	call   7c80 <readsect>
  	for(; pa < epa; pa += SECTSIZE, offset++)
    7d08:	81 c3 00 02 00 00    	add    $0x200,%ebx
    7d0e:	47                   	inc    %edi
    7d0f:	58                   	pop    %eax
    7d10:	5a                   	pop    %edx
    7d11:	eb ea                	jmp    7cfd <readseg+0x1d>
}
    7d13:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7d16:	5b                   	pop    %ebx
    7d17:	5e                   	pop    %esi
    7d18:	5f                   	pop    %edi
    7d19:	5d                   	pop    %ebp
    7d1a:	c3                   	ret    

00007d1b <bootmain>:
{
    7d1b:	55                   	push   %ebp
    7d1c:	89 e5                	mov    %esp,%ebp
    7d1e:	57                   	push   %edi
    7d1f:	56                   	push   %esi
    7d20:	53                   	push   %ebx
    7d21:	83 ec 1c             	sub    $0x1c,%esp
	mbr = (uint8_t *)(0x7dbe);
    7d24:	c7 05 80 7e 00 00 be 	movl   $0x7dbe,0x7e80
    7d2b:	7d 00 00 
	uint32_t kOffset = (*(uint32_t *)(mbr+SECTORSTART+MBRSIZE))*SECTSIZE;
    7d2e:	8b 35 d6 7d 00 00    	mov    0x7dd6,%esi
    7d34:	c1 e6 09             	shl    $0x9,%esi
	readseg((uint8_t*)elf, 8192, kOffset);// Read 'count' bytes at 'offset' from kernel into physical address 'pa'. Might copy more than asked.
    7d37:	56                   	push   %esi
    7d38:	68 00 20 00 00       	push   $0x2000
    7d3d:	68 00 00 01 00       	push   $0x10000
    7d42:	e8 99 ff ff ff       	call   7ce0 <readseg>
  	if(*((uint32_t *)(elf->e_ident)) != ELF_MAGIC)
    7d47:	83 c4 0c             	add    $0xc,%esp
    7d4a:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
    7d51:	45 4c 46 
    7d54:	75 5b                	jne    7db1 <bootmain+0x96>
  	ph = (struct elf32_phdr*)((uint8_t*)elf + elf->e_phoff);
    7d56:	a1 1c 00 01 00       	mov    0x1001c,%eax
    7d5b:	8d 90 00 00 01 00    	lea    0x10000(%eax),%edx
  	eph = ph + elf->e_phnum;
    7d61:	0f b7 1d 2c 00 01 00 	movzwl 0x1002c,%ebx
    7d68:	c1 e3 05             	shl    $0x5,%ebx
    7d6b:	01 d3                	add    %edx,%ebx
  	for(; ph < eph; ph++){
    7d6d:	39 da                	cmp    %ebx,%edx
    7d6f:	73 33                	jae    7da4 <bootmain+0x89>
    		pa = (uint8_t*)ph->p_paddr;
    7d71:	8b 7a 0c             	mov    0xc(%edx),%edi
    		readseg(pa, ph->p_filesz, ph->p_offset+kOffset);
    7d74:	8b 42 04             	mov    0x4(%edx),%eax
    7d77:	01 f0                	add    %esi,%eax
    7d79:	50                   	push   %eax
    7d7a:	ff 72 10             	pushl  0x10(%edx)
    7d7d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    7d80:	57                   	push   %edi
    7d81:	e8 5a ff ff ff       	call   7ce0 <readseg>
    		if(ph->p_memsz > ph->p_filesz)
    7d86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    7d89:	8b 4a 14             	mov    0x14(%edx),%ecx
    7d8c:	8b 42 10             	mov    0x10(%edx),%eax
    7d8f:	83 c4 0c             	add    $0xc,%esp
    7d92:	39 c1                	cmp    %eax,%ecx
    7d94:	76 09                	jbe    7d9f <bootmain+0x84>
      			stosb(pa + ph->p_filesz, 0, ph->p_memsz - ph->p_filesz);
    7d96:	01 c7                	add    %eax,%edi
    7d98:	29 c1                	sub    %eax,%ecx
}

static inline void
stosb(void *addr, int data, int cnt)
{
  asm volatile("cld; rep stosb" :
    7d9a:	31 c0                	xor    %eax,%eax
    7d9c:	fc                   	cld    
    7d9d:	f3 aa                	rep stos %al,%es:(%edi)
  	for(; ph < eph; ph++){
    7d9f:	83 c2 20             	add    $0x20,%edx
    7da2:	eb c9                	jmp    7d6d <bootmain+0x52>
}
    7da4:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7da7:	5b                   	pop    %ebx
    7da8:	5e                   	pop    %esi
    7da9:	5f                   	pop    %edi
    7daa:	5d                   	pop    %ebp
  	entry();
    7dab:	ff 25 18 00 01 00    	jmp    *0x10018
}
    7db1:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7db4:	5b                   	pop    %ebx
    7db5:	5e                   	pop    %esi
    7db6:	5f                   	pop    %edi
    7db7:	5d                   	pop    %ebp
    7db8:	c3                   	ret    
